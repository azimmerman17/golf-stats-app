"""Added Hole_Coords Model

Revision ID: c3ba1bc0431f
Revises: 1f44bf2fb5ce
Create Date: 2025-03-11 07:11:33.343541

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = 'c3ba1bc0431f'
down_revision = '1f44bf2fb5ce'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('hole_coords',
    sa.Column('HOLE_GEO_ID', sa.Integer(), nullable=False),
    sa.Column('COURSE_ID', sa.Integer(), nullable=False),
    sa.Column('NUMBER', sa.Integer(), nullable=False),
    sa.Column('HANDLE', sa.String(length=25), nullable=False),
    sa.Column('TEE_LAT', sa.FLOAT(), nullable=True),
    sa.Column('TEE_LON', sa.FLOAT(), nullable=True),
    sa.Column('DL_LAT', sa.FLOAT(), nullable=True),
    sa.Column('DL_LON', sa.FLOAT(), nullable=True),
    sa.Column('DL2_LAT', sa.FLOAT(), nullable=True),
    sa.Column('DL2_LON', sa.FLOAT(), nullable=True),
    sa.Column('CGREEN_LAT', sa.FLOAT(), nullable=True),
    sa.Column('CGREEN_LON', sa.FLOAT(), nullable=True),
    sa.Column('FGREEN_LAT', sa.FLOAT(), nullable=True),
    sa.Column('FGREEN_LON', sa.FLOAT(), nullable=True),
    sa.Column('BGREEN_LAT', sa.FLOAT(), nullable=True),
    sa.Column('BGREEN_LON', sa.FLOAT(), nullable=True),
    sa.Column('ZOOM', sa.Integer(), nullable=True),
    sa.Column('ROTATION', sa.FLOAT(), nullable=True),
    sa.Column('GREEN_DEPTH', sa.FLOAT(), nullable=True),
    sa.Column('CREATED_AT', sa.TIMESTAMP(), nullable=False),
    sa.Column('UPDATED_AT', sa.TIMESTAMP(), nullable=False),
    sa.ForeignKeyConstraint(['COURSE_ID'], ['course.COURSE_ID'], onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('HOLE_GEO_ID'),
    sa.UniqueConstraint('HOLE_GEO_ID')
    )

    with op.batch_alter_table('hole_coords', schema=None) as batch_op:
        batch_op.create_check_constraint('CHECK_COORDS_NUMBER_MIN', sa.sql.column('NUMBER') >= 1)
        batch_op.create_check_constraint('CHECK_COORDS_NUMBER_MAX', sa.sql.column('NUMBER') <= 18)
        batch_op.create_check_constraint('CHECK_TEE_LAT_MIN', sa.sql.column('TEE_LAT') > -90)
        batch_op.create_check_constraint('CHECK_TEE_LAT_MAX', sa.sql.column('TEE_LAT') < 90)
        batch_op.create_check_constraint('CHECK_TEE_LON_MIN', sa.sql.column('TEE_LON') > -180)
        batch_op.create_check_constraint('CHECK_TEE_LON_MAX', sa.sql.column('TEE_LON') < 180)
        batch_op.create_check_constraint('CHECK_DL_LAT_MIN', sa.sql.column('DL_LAT') > -90)
        batch_op.create_check_constraint('CHECK_DL_LAT_MAX', sa.sql.column('DL_LAT') < 90)
        batch_op.create_check_constraint('CHECK_DL_LON_MIN', sa.sql.column('DL_LON') > -180)
        batch_op.create_check_constraint('CHECK_DL_LON_MAX', sa.sql.column('DL_LON') < 180)
        batch_op.create_check_constraint('CHECK_DL2_LAT_MIN', sa.sql.column('DL2_LAT') > -90)
        batch_op.create_check_constraint('CHECK_DL2_LAT_MAX', sa.sql.column('DL2_LAT') < 90)
        batch_op.create_check_constraint('CHECK_DL2_LON_MIN', sa.sql.column('DL2_LON') > -180)
        batch_op.create_check_constraint('CHECK_DL2_LON_MAX', sa.sql.column('DL2_LON') < 180)
        batch_op.create_check_constraint('CHECK_CGREEN_LAT_MIN', sa.sql.column('CGREEN_LAT') > -90)
        batch_op.create_check_constraint('CHECK_CGREEN_LAT_MAX', sa.sql.column('CGREEN_LAT') < 90)
        batch_op.create_check_constraint('CHECK_CGREEN_LON_MIN', sa.sql.column('CGREEN_LON') > -180)
        batch_op.create_check_constraint('CHECK_CGREEN_LON_MAX', sa.sql.column('CGREEN_LON') < 180)
        batch_op.create_check_constraint('CHECK_FGREEN_LAT_MIN', sa.sql.column('FGREEN_LAT') > -90)
        batch_op.create_check_constraint('CHECK_FGREEN_LAT_MAX', sa.sql.column('FGREEN_LAT') < 90)
        batch_op.create_check_constraint('CHECK_FGREEN_LON_MIN', sa.sql.column('FGREEN_LON') > -180)
        batch_op.create_check_constraint('CHECK_FGREEN_LON_MAX', sa.sql.column('FGREEN_LON') < 180)
        batch_op.create_check_constraint('CHECK_BGREEN_LAT_MIN', sa.sql.column('BGREEN_LAT') > -90)
        batch_op.create_check_constraint('CHECK_BGREEN_LAT_MAX', sa.sql.column('BGREEN_LAT') < 90)
        batch_op.create_check_constraint('CHECK_BGREEN_LON_MIN', sa.sql.column('BGREEN_LON') > -180)
        batch_op.create_check_constraint('CHECK_BGREEN_LON_MAX', sa.sql.column('BGREEN_LON') < 180)
        batch_op.create_check_constraint('CHECK_COORDS_ZOOM_MIN', sa.sql.column('ZOOM') >= 1)
        batch_op.create_check_constraint('CHECK_COORDS_ZOOM_MAX', sa.sql.column('ZOOM') <= 20)
        batch_op.create_check_constraint('CHECK_ROTATION_MIN', sa.sql.column('ROTATION') >= 0)
        batch_op.create_check_constraint('CHECK_ROTATION_MAX', sa.sql.column('ROTATION') < 360)

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('hole_coords')
    # ### end Alembic commands ###
